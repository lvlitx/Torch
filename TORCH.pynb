{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOYe0xFE43RVOsCrQnRKE3T"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uxRfXUojruyM","executionInfo":{"status":"ok","timestamp":1718886660651,"user_tz":-330,"elapsed":548,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"197d0904-bf77-4a5d-f3bf-91dd11c593e0"},"outputs":[{"output_type":"stream","name":"stdout","text":["/bin/bash: line 1: nvidia-smi: command not found\n"]}],"source":["!nvidia-smi # use this if u have a GPU it will show the info about the GPU"]},{"cell_type":"code","source":["import torch"],"metadata":{"id":"uJBZQ84qr2g6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = torch.rand(3,4)"],"metadata":{"id":"QRW9HatWmhOq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["type(X )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nYkrWWTwmkLM","executionInfo":{"status":"ok","timestamp":1718879552552,"user_tz":-330,"elapsed":9,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"e1e522e0-97d5-4de1-8f47-42f97ad5435a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Tensor"]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["scaler = torch.rand(7)\n","scaler # this has only one dimension"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N0_SCkt-moKP","executionInfo":{"status":"ok","timestamp":1718879552552,"user_tz":-330,"elapsed":8,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"4a1e9b1e-d3f8-4acd-e6f8-529335d671f1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([0.5806, 0.8072, 0.8648, 0.7243, 0.7214, 0.4970, 0.4639])"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["#check the dimension of the tensor\n","scaler.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mDEx2hcMnBxc","executionInfo":{"status":"ok","timestamp":1718879552552,"user_tz":-330,"elapsed":7,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"60f2cd95-6253-4804-bc74-adcb6e3f6661"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","source":["scaler[5].item()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8vO4Y3DVna3P","executionInfo":{"status":"ok","timestamp":1718879552552,"user_tz":-330,"elapsed":6,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"bfa5af23-65d5-4632-f22f-b371a01055df"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.4970031976699829"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["vector = torch.rand([7,7])"],"metadata":{"id":"mNEjbir9nk48"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["vector.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aEkq50fboMB0","executionInfo":{"status":"ok","timestamp":1718879552552,"user_tz":-330,"elapsed":5,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"849c055b-62eb-47a8-e815-fe8274d7c722"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":80}]},{"cell_type":"code","source":["vector"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WgvBYs5OoNzq","executionInfo":{"status":"ok","timestamp":1718879552552,"user_tz":-330,"elapsed":5,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"8793ddf4-46f5-4b8a-a088-384c155c58fa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[0.7144, 0.4280, 0.9419, 0.7387, 0.6070, 0.1245, 0.6495],\n","        [0.7385, 0.9303, 0.0440, 0.2835, 0.6956, 0.6925, 0.2460],\n","        [0.5464, 0.9914, 0.6642, 0.3222, 0.0688, 0.1134, 0.0348],\n","        [0.2995, 0.3836, 0.0508, 0.9770, 0.3339, 0.8337, 0.2591],\n","        [0.4658, 0.9714, 0.0461, 0.8860, 0.7631, 0.5354, 0.2579],\n","        [0.4048, 0.5586, 0.6350, 0.6272, 0.5598, 0.0117, 0.3862],\n","        [0.3654, 0.4517, 0.5116, 0.8145, 0.9564, 0.5210, 0.0392]])"]},"metadata":{},"execution_count":81}]},{"cell_type":"code","source":["vector.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AK9j21nZoOx_","executionInfo":{"status":"ok","timestamp":1718879552552,"user_tz":-330,"elapsed":4,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"b08c0753-dc9e-4741-d0d5-bee6de328a62"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([7, 7])"]},"metadata":{},"execution_count":82}]},{"cell_type":"code","source":["vector = torch.tensor([7, 7])\n","vector"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gRUIAK06omL6","executionInfo":{"status":"ok","timestamp":1718879552552,"user_tz":-330,"elapsed":3,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"c400ac5a-1d54-4e99-ec62-fdc39c491c03"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([7, 7])"]},"metadata":{},"execution_count":83}]},{"cell_type":"code","source":["vector.ndim\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MURvmfyKqJkJ","executionInfo":{"status":"ok","timestamp":1718879553396,"user_tz":-330,"elapsed":846,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"a88817a8-18b2-4dd4-8520-5ab400ec0e36"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":84}]},{"cell_type":"code","source":["vector.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0LMyswprqLn8","executionInfo":{"status":"ok","timestamp":1718879553396,"user_tz":-330,"elapsed":17,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"81df0f46-9e9f-465e-d302-a4070fe69a9c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([2])"]},"metadata":{},"execution_count":85}]},{"cell_type":"code","source":["# matrix tensor\n","X = torch.tensor([[1,2,3],\n","              [4,5,6]])"],"metadata":{"id":"hAbdn2E6qONv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["type(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h9ONRfqIqvLv","executionInfo":{"status":"ok","timestamp":1718879553396,"user_tz":-330,"elapsed":16,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"9ee505af-5550-4584-a887-a94f62c35c6e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Tensor"]},"metadata":{},"execution_count":87}]},{"cell_type":"code","source":["X.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UV7w0Yq7qz57","executionInfo":{"status":"ok","timestamp":1718879553396,"user_tz":-330,"elapsed":15,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"846a1de7-989b-4138-9252-ff239f61f412"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([2, 3])"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":["X.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gx3vb5-Eq2N8","executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":16,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"9eed3d2b-a468-41f8-8554-9600fa57bca0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":89}]},{"cell_type":"code","source":[" x = torch.range(0,10,2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MQqcF6K4q43R","executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":15,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"df97b20a-c8f7-409e-c44f-0f10ed4c0dde"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-90-b597731eebd1>:1: UserWarning: torch.range is deprecated and will be removed in a future release because its behavior is inconsistent with Python's range builtin. Instead, use torch.arange, which produces values in [start, end).\n","  x = torch.range(0,10,2)\n"]}]},{"cell_type":"code","source":["x.ndim\n","x.type"],"metadata":{"id":"UsRsIhd0uN4b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":14,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"749de9cc-0cf2-4bfe-ce09-9d532bccce07"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function Tensor.type>"]},"metadata":{},"execution_count":91}]},{"cell_type":"code","source":["import torch\n","torch = torch.tensor([1,2,3,4])\n","torch.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J4RW0owi1BLs","executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":14,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"7ef061d4-fa31-470d-a8e7-e0f2c7c5778d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([4])"]},"metadata":{},"execution_count":92}]},{"cell_type":"code","source":["import torch\n","tensor = torch.tensor([1,2,3])"],"metadata":{"id":"URL9oSI31kM8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["element_wise = tensor*tensor\n","element_wise"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OgWkYEJZ3bWh","executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":13,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"cbe4c680-d9d4-4862-97d8-e2dba0c94c77"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([1, 4, 9])"]},"metadata":{},"execution_count":94}]},{"cell_type":"code","source":["matrix_multiplication = torch.matmul(tensor,tensor)\n","matrix_multiplication"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MCN4Q8QK3hrg","executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":13,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"3aa0a441-d4ca-441b-e4e9-b87d42650b54"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(14)"]},"metadata":{},"execution_count":95}]},{"cell_type":"code","source":["# matrix multiplication by loop\n","%%time\n","tensor = torch.tensor(range(1,11,2))\n","value = 0\n","for i in range(len(tensor)):\n","  value += tensor[i]*tensor[i]\n","print(value)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qHPSLD7e3rT3","executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":12,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"305b68b1-bf16-40f2-ec91-3711ea1974e4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor(165)\n","CPU times: user 1.42 ms, sys: 0 ns, total: 1.42 ms\n","Wall time: 1.43 ms\n"]}]},{"cell_type":"code","source":["%%time\n","tensor = torch.tensor(range(1,11,2))\n","vlaue = torch.matmul(tensor,tensor)\n","print(value)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VhBYdCjw4Oj5","executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":11,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"3d02dabe-fbfc-47d7-aaf2-42fb631fa5d7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor(165)\n","CPU times: user 1.29 ms, sys: 0 ns, total: 1.29 ms\n","Wall time: 1.29 ms\n"]}]},{"cell_type":"code","source":["# tensor_A = torch.tensor([[1,1],\n","#                          [12,13],\n","#                          [16,17]])\n","# tensor_B = torch.tensor([[1,2],\n","#                        [4,5],\n","#                        [7,8]])\n","\n","\n","\n","# new_tensor_mutl = torch.matmul(tensor_A,tensor_B)\n","# new_tensor_mutl"],"metadata":{"id":"mwz1ytqV49y1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# to avoid the above error we need to transpose the matrix which we desire to multiply\n","tensor = tensor_A.T\n","tensor"],"metadata":{"id":"naTWHbbr51XE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":11,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"3fed7d49-7f27-4250-8640-4362db042305"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[ 1, 12, 16],\n","        [ 1, 13, 17]])"]},"metadata":{},"execution_count":99}]},{"cell_type":"code","source":["new_tensor_mutl = torch.matmul(tensor,tensor_B)\n","new_tensor_mutl"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"00SANzlz6d3D","executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":10,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"a225bc9e-34a6-4fce-f0ce-74ea5f4b4e70"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[161, 190],\n","        [172, 203]])"]},"metadata":{},"execution_count":100}]},{"cell_type":"code","source":["A = torch.rand([2,3])"],"metadata":{"id":"K9lUWakW6gYJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["A"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YrhErhe37gti","executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":9,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"0cddcb18-8191-4806-fb53-f2fa87d2821f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[0.8623, 0.5299, 0.6759],\n","        [0.7716, 0.5361, 0.2493]])"]},"metadata":{},"execution_count":102}]},{"cell_type":"code","source":["B = torch.rand([2,3])"],"metadata":{"id":"hDeX2rEn7hYH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["B"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-NApuY-47lvd","executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":9,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"fa233ccf-5a32-44dd-b3bd-0e031fdc573b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[1.0000, 0.8952, 0.0954],\n","        [0.4130, 0.9539, 0.4598]])"]},"metadata":{},"execution_count":104}]},{"cell_type":"code","source":["# now multiply all a and b\n","# A*B this happens because it is an element wise multiplication\n","# C = torch.matmul(A,B) # This do not happen because the the dimensions are not matching together\n","\n","# C"],"metadata":{"id":"RdfyKePr7nLt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#To do the above mlt we need to transopose one of the matrix\n","X =  torch.mm(A.T,B)#mm is the short form for the matmul\n","X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DSa_l1gG7sCo","executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":8,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"e3def76b-1457-4312-e009-3e4c5093e93f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[1.1810, 1.5080, 0.4371],\n","        [0.7513, 0.9858, 0.2971],\n","        [0.7788, 0.8428, 0.1791]])"]},"metadata":{},"execution_count":106}]},{"cell_type":"code","source":["x.type"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mFQdFpJ88UVk","executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":7,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"f39cd2a7-bf22-4b4f-aef7-0be2e4c65231"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function Tensor.type>"]},"metadata":{},"execution_count":107}]},{"cell_type":"code","source":["print(torch.__version__)"],"metadata":{"id":"1d71JcXY8aGP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":6,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"026f0677-8e87-40fb-d730-defc311868b0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.3.0+cu121\n"]}]},{"cell_type":"code","source":["torch.range(0,10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pF-_qRTRMmD3","executionInfo":{"status":"ok","timestamp":1718879553397,"user_tz":-330,"elapsed":5,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"a927e76f-f29b-4978-9b36-55d5ee8be133"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-109-dfdec9b83f7d>:1: UserWarning: torch.range is deprecated and will be removed in a future release because its behavior is inconsistent with Python's range builtin. Instead, use torch.arange, which produces values in [start, end).\n","  torch.range(0,10)\n"]},{"output_type":"execute_result","data":{"text/plain":["tensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])"]},"metadata":{},"execution_count":109}]},{"cell_type":"code","source":["import torch\n","# Since the linear layer starts with a random weights matrix, let's make it reproducible (more on this later)\n","torch.manual_seed(42)\n","# This uses matrix multiplication\n","linear = torch.nn.Linear(in_features=2, # in_features = matches inner dimension of input\n","                         out_features=6) # out_features = describes outer value\n","x = tensor_A\n","output = linear(x)\n","print(f\"Input shape: {x.shape}\\n\")\n","print(f\"Output:\\n{output}\\n\\nOutput shape: {output.shape}\")"],"metadata":{"id":"epVESlmt2TBA","colab":{"base_uri":"https://localhost:8080/","height":350},"executionInfo":{"status":"error","timestamp":1718879578878,"user_tz":-330,"elapsed":7,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"43791c0a-be34-4983-ef7d-c6ed8588b8b5"},"execution_count":null,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"mat1 and mat2 must have the same dtype, but got Long and Float","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-111-6a816ba2589f>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m                          out_features=6) # out_features = describes outer value \n\u001b[1;32m      7\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtensor_A\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlinear\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Input shape: {x.shape}\\n\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Output:\\n{output}\\n\\nOutput shape: {output.shape}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1531\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1532\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1534\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1539\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1540\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1542\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1543\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/linear.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    114\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 116\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbias\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mextra_repr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: mat1 and mat2 must have the same dtype, but got Long and Float"]}]},{"cell_type":"code","source":["torch.manual_seed(42)\n","linear - tor"],"metadata":{"id":"9ns3xpMB2T5h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","# Since the linear layer starts with a random weights matrix, let's make it reproducible (more on this later)\n","torch.manual_seed(42)\n","# This uses matrix multiplication\n","linear = torch.nn.Linear(in_features=2, # in_features = matches inner dimension of input\n","                         out_features=6) # out_features = describes outer value\n","x = tensor_A.float() # Convert tensor_A to float\n","output = linear(x)\n","print(f\"Input shape: {x.shape}\\n\")\n","print(f\"Output:\\n{output}\\n\\nOutput shape: {output.shape}\")"],"metadata":{"id":"FK_GPgF82UCg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718879746592,"user_tz":-330,"elapsed":718,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"19b31abe-0a44-4b91-eab5-ef8a69a72e67"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Input shape: torch.Size([3, 2])\n","\n","Output:\n","tensor([[ 1.6499,  0.5797,  0.3287, -0.0288,  0.6497,  0.8515],\n","        [14.6395,  6.5521,  0.3367,  1.1676,  1.2814,  9.2003],\n","        [19.1496,  8.4877,  0.2878,  1.4516,  1.6998, 12.1882]],\n","       grad_fn=<AddmmBackward0>)\n","\n","Output shape: torch.Size([3, 6])\n"]}]},{"cell_type":"code","source":["import torch\n","x = torch.tensor([1.,8.])\n","x"],"metadata":{"id":"gLatOkba2UHk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718881649633,"user_tz":-330,"elapsed":543,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"0371625c-850d-4538-f255-6c5a0c68373f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([1., 8.])"]},"metadata":{},"execution_count":113}]},{"cell_type":"code","source":["x = torch.arange(1.,8.)\n","x"],"metadata":{"id":"0CMDsrhE2ULL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718881699014,"user_tz":-330,"elapsed":6,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"a1338d45-d97b-4165-d324-0a8b785361f2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([1., 2., 3., 4., 5., 6., 7.])"]},"metadata":{},"execution_count":115}]},{"cell_type":"code","source":["x.shape\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zcn8UzihVOCg","executionInfo":{"status":"ok","timestamp":1718881712048,"user_tz":-330,"elapsed":520,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"e7026f1a-bea9-45bc-b246-413191ee7741"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([7])"]},"metadata":{},"execution_count":116}]},{"cell_type":"code","source":["# now let us add xtra dimensions with torch.reshape\n","x_reshaped = x.reshape(1,7)\n","x_reshaped.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b_iMUHrLVXK3","executionInfo":{"status":"ok","timestamp":1718881831109,"user_tz":-330,"elapsed":575,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"4728d7ad-f26e-439f-eac4-664036b5fdb9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([1, 7])"]},"metadata":{},"execution_count":120}]},{"cell_type":"code","source":["#By the number of brackets we can say number if dimensions\n","# Change view and keep the data as original\n","z = x.view(1,7)\n","z,z.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H-PpORqZVomP","executionInfo":{"status":"ok","timestamp":1718881978264,"user_tz":-330,"elapsed":733,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"2b5d0c07-dcf4-4f7d-bf59-09964f1737b1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[1., 2., 3., 4., 5., 6., 7.]]), torch.Size([1, 7]))"]},"metadata":{},"execution_count":122}]},{"cell_type":"code","source":["# changing the z changes the x\n","z[:, 0 ] = 5\n","z,x # Both the x and z has changed the positional value"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gZgkO7OWWUS2","executionInfo":{"status":"ok","timestamp":1718882093628,"user_tz":-330,"elapsed":8,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"744e918d-ea90-4b12-ae5b-a4fe1dbf5117"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[5., 2., 3., 4., 5., 6., 7.]]), tensor([5., 2., 3., 4., 5., 6., 7.]))"]},"metadata":{},"execution_count":124}]},{"cell_type":"code","source":["# stack the tensor on top of each other\n","x_stacked = torch.stack([x,x,x,x],dim=0)\n","x_stacked"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QD7gOemoWsPC","executionInfo":{"status":"ok","timestamp":1718882272104,"user_tz":-330,"elapsed":553,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"aa18e8b8-d4c6-40f9-9ca2-3736ec77e882"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[5., 2., 3., 4., 5., 6., 7.],\n","        [5., 2., 3., 4., 5., 6., 7.],\n","        [5., 2., 3., 4., 5., 6., 7.],\n","        [5., 2., 3., 4., 5., 6., 7.]])"]},"metadata":{},"execution_count":133}]},{"cell_type":"code","source":["# To squeez the above tensor means that we remove all the single dimensionos\n","x_squeezed = x_reshaped.squeeze()\n","print(x_reshaped,\"this is the previous one \", x_reshaped.shape , \"this is the previsous shape \")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3-SHqe1vXJBJ","executionInfo":{"status":"ok","timestamp":1718882661249,"user_tz":-330,"elapsed":665,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"57429838-9526-4afc-80e9-3ffacb1c1627"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[5., 2., 3., 4., 5., 6., 7.]]) this is the previous one  torch.Size([1, 7]) this is the previsous shape \n"]}]},{"cell_type":"code","source":["print(x_squeezed, \"this is after the squeez \", x_squeezed.shape , \" the is the new shape \")# this has removed the dimension in the above 1, 7 tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rrD92UomYRVt","executionInfo":{"status":"ok","timestamp":1718882720674,"user_tz":-330,"elapsed":5,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"8345b7a4-d0e5-4ed8-a8d1-a400da90b3d0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([5., 2., 3., 4., 5., 6., 7.]) this is after the squeez  torch.Size([7])  the is the new shape \n"]}]},{"cell_type":"code","source":["x_unsqueezed = x_squeezed.unsqueeze(dim=0)\n","x_unsqueezed.shape # same as the above but to unsqueez the the degree"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7DgcS-eBYfw9","executionInfo":{"status":"ok","timestamp":1718883038611,"user_tz":-330,"elapsed":654,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"952722d1-537b-4360-9af0-21862aea0e38"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([1, 7])"]},"metadata":{},"execution_count":140}]},{"cell_type":"code","source":["import torch\n","import numpy as np\n","array = np.arange(1.,8.)\n","tensor = torch.from_numpy(array)\n","tensor # while converting from numpy torch will represent the numpy default parameter\n","print(tensor.dtype)"],"metadata":{"id":"KZuzsWFsZhWr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718892694245,"user_tz":-330,"elapsed":552,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"a9858549-2fad-4331-a1e3-382009b7b5ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.float64\n"]}]},{"cell_type":"code","source":["array.dtype # default"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uCR0i1dz-0yA","executionInfo":{"status":"ok","timestamp":1718892719452,"user_tz":-330,"elapsed":654,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"8ca89768-c9f0-48ba-c789-605430b273ab"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dtype('float64')"]},"metadata":{},"execution_count":148}]},{"cell_type":"code","source":["# activate Bokeh output in Jupyter notebook\n","from bokeh.io import output_notebook\n","\n","output_notebook()"],"metadata":{"id":"FYwtksVE_Wed"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","import numpy as np\n","array = np.arange(1.,8.)\n","tensor = torch.from_numpy(array)\n","tensor"],"metadata":{"id":"VNTUa9OGHlMg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1719292209829,"user_tz":-330,"elapsed":504,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"8f43b223-87fc-4e7f-b690-249d76b021f7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([1., 2., 3., 4., 5., 6., 7.], dtype=torch.float64)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["tensor.ndim, tensor.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3EJ0-lqvzPd4","executionInfo":{"status":"ok","timestamp":1719292228566,"user_tz":-330,"elapsed":518,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"884d2258-0856-4a28-b968-1341288a4406"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, torch.Size([7]))"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# Random tensors\n","# random = torch.rand(3,4)\n","# random.ndim , random.\n","RANODM_SEED = 42\n","torch.manual_seed(RANODM_SEED)\n","random_2 = torch.rand(3,4)\n","random_2\n","\n","torch.random.manual_seed(RANODM_SEED)\n","#Have to reset the above line every time we need to create an identical tensor\n","\n","random3 = torch.rand(3,4)\n","random3,random_2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TS4kHWHczVYl","executionInfo":{"status":"ok","timestamp":1719292777944,"user_tz":-330,"elapsed":514,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"068aff57-02e7-4a1e-9ba0-4d2b44cfc8af"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[0.8823, 0.9150, 0.3829, 0.9593],\n","         [0.3904, 0.6009, 0.2566, 0.7936],\n","         [0.9408, 0.1332, 0.9346, 0.5936]]),\n"," tensor([[0.8823, 0.9150, 0.3829, 0.9593],\n","         [0.3904, 0.6009, 0.2566, 0.7936],\n","         [0.9408, 0.1332, 0.9346, 0.5936]]))"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["random_2 == random3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jr7WzIVq0YTO","executionInfo":{"status":"ok","timestamp":1719292803590,"user_tz":-330,"elapsed":460,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"5bef97a5-69ec-4aad-eef7-c21e276a3c59"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[True, True, True, True],\n","        [True, True, True, True],\n","        [True, True, True, True]])"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["# check for GPU\n","import torch\n","torch.cuda.is_available()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VciXQbbN1jW4","executionInfo":{"status":"ok","timestamp":1719292891096,"user_tz":-330,"elapsed":474,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"3a688771-c3c0-4f3f-80fe-8345dda64fb9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["# create a device variable to run on GPU or ele CPU\n","device = \"cuda\"  if torch.cuda.is_available()  else 'cpu'"],"metadata":{"id":"mD-9_76Q14oc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["device"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"OloVbJfU2ZnL","executionInfo":{"status":"ok","timestamp":1719293031806,"user_tz":-330,"elapsed":7,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"12118270-4e87-4d73-f611-0090ef8a20ad"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'cpu'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["torch.cuda.device_count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H3khCPnd2a_q","executionInfo":{"status":"ok","timestamp":1719293101544,"user_tz":-330,"elapsed":402,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"25ee5945-c5af-455c-a5e5-f04a63b3875f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["import torch\n","tensor = torch.tensor([1,2,3])\n","tensor , tensor.device\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GetX4kpC2sGq","executionInfo":{"status":"ok","timestamp":1719293362757,"user_tz":-330,"elapsed":406,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"e0ae7085-edd4-484b-e70d-977d6dc8c07e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([1, 2, 3]), device(type='cpu'))"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["# to move the tensor to GPU\n","# tensor_on_GPU = tensor.to(device)\n","# tensor_on_GPU.device"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dBMRHcIa3OZs","executionInfo":{"status":"ok","timestamp":1719293425591,"user_tz":-330,"elapsed":6,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"f922df69-1e01-461d-84e3-4b604f2db4f3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["device(type='cpu')"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# building blocks of creating neural networks in pytorch\n","import torch\n","from torch import nn\n","\n","#ceck the torch version\n","print(torch.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZBlvDGol35p-","executionInfo":{"status":"ok","timestamp":1719752524032,"user_tz":-330,"elapsed":7513,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"3a9918f7-58e1-4d4e-ea9a-ea6e71a2f0e5"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["2.3.0+cu121\n"]}]},{"cell_type":"code","source":["# We'll use linear regression to create the data with known parameters\n","weights = 0.7\n","bias = 0.3\n","\n","#create a data\n","start = 0\n","end = 1\n","step = 0.02\n","\n","\n","x = torch.arange(start,end,step)\n","y = weights * x + bias\n","\n","x[:10] , y[:10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NqjbMSpp7D2Z","executionInfo":{"status":"ok","timestamp":1719752524032,"user_tz":-330,"elapsed":4,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"7072896c-bb66-478a-af81-5886daa841a2"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([0.0000, 0.0200, 0.0400, 0.0600, 0.0800, 0.1000, 0.1200, 0.1400, 0.1600,\n","         0.1800]),\n"," tensor([0.3000, 0.3140, 0.3280, 0.3420, 0.3560, 0.3700, 0.3840, 0.3980, 0.4120,\n","         0.4260]))"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["from torch import nn\n","class linearregressionmodel():\n","  def __init__(self):\n","    super().__init__()\n","    self.weights = torch.rand(1,requires_grad=True)\n","    self.bias = torch.rand(1,requires_grad=True)\n","\n","\n","\n","  def forward(self,x : torch.tensor):\n","    return self.weights * x + self.bias\n"],"metadata":{"id":"ziUVbqaF97GX","executionInfo":{"status":"ok","timestamp":1719753085044,"user_tz":-330,"elapsed":4,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["model = linearregressionmodel()"],"metadata":{"id":"u7GxmANLPXAo","executionInfo":{"status":"ok","timestamp":1719753087459,"user_tz":-330,"elapsed":393,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["manual_seed = 42\n","torch.manual_seed(manual_seed)\n","list(model.parameters())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":173},"id":"eCoGy56mQVFW","executionInfo":{"status":"error","timestamp":1719753089760,"user_tz":-330,"elapsed":689,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"501a48bd-9dfa-440d-e7b0-953288ef5e4c"},"execution_count":16,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"'linearregressionmodel' object has no attribute 'parameters'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-fe7c35478167>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmanual_seed\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m42\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmanual_seed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmanual_seed\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'linearregressionmodel' object has no attribute 'parameters'"]}]},{"cell_type":"code","source":["# Create a Linear Regression model class\n","class LinearRegressionModel(nn.Module): # <- almost everything in PyTorch is a nn.Module (think of this as neural network lego blocks)\n","    def __init__(self):\n","        super().__init__()\n","        self.weights = nn.Parameter(torch.randn(1, # <- start with random weights (this will get adjusted as the model learns)\n","                                                dtype=torch.float), # <- PyTorch loves float32 by default\n","                                   requires_grad=True) # <- can we update this value with gradient descent?)\n","\n","        self.bias = nn.Parameter(torch.randn(1, # <- start with random bias (this will get adjusted as the model learns)\n","                                            dtype=torch.float), # <- PyTorch loves float32 by default\n","                                requires_grad=True) # <- can we update this value with gradient descent?))\n","\n","    # Forward defines the computation in the model\n","    def forward(self, x: torch.Tensor) -> torch.Tensor: # <- \"x\" is the input data (e.g. training/testing features)\n","        return self.weights * x + self.bias # <- this is the linear regression formula (y = m*x + b)"],"metadata":{"id":"B-Y6OVREQXAN","executionInfo":{"status":"ok","timestamp":1719753129840,"user_tz":-330,"elapsed":397,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# Set manual seed since nn.Parameter are randomly initialzied\n","torch.manual_seed(42)\n","\n","# Create an instance of the model (this is a subclass of nn.Module that contains nn.Parameter(s))\n","model_0 = LinearRegressionModel()\n","\n","# Check the nn.Parameter(s) within the nn.Module subclass we created\n","list(model_0.parameters())\n"],"metadata":{"id":"xTkqe92dRjrK","executionInfo":{"status":"ok","timestamp":1719753144622,"user_tz":-330,"elapsed":407,"user":{"displayName":"lalith reddy","userId":"04236208273900619986"}},"outputId":"005d9fce-0a56-4dec-ae70-d925e4e493db","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Parameter containing:\n"," tensor([0.3367], requires_grad=True),\n"," Parameter containing:\n"," tensor([0.1288], requires_grad=True)]"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":[],"metadata":{"id":"7XU0Bd3hRnU9"},"execution_count":null,"outputs":[]}]}